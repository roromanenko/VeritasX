/* tslint:disable */
/* eslint-disable */
/**
 * VeritasX API
 * Crypto trading API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CandleDto
 */
export interface CandleDto {
    /**
     * 
     * @type {string}
     * @memberof CandleDto
     */
    'openTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof CandleDto
     */
    'open'?: number;
    /**
     * 
     * @type {number}
     * @memberof CandleDto
     */
    'high'?: number;
    /**
     * 
     * @type {number}
     * @memberof CandleDto
     */
    'low'?: number;
    /**
     * 
     * @type {number}
     * @memberof CandleDto
     */
    'close'?: number;
    /**
     * 
     * @type {number}
     * @memberof CandleDto
     */
    'volume'?: number;
}
/**
 * 
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'currentPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'newPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'confirmPassword'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CollectionState = {
    Pending: 'Pending',
    InProgress: 'InProgress',
    Completed: 'Completed',
    Failed: 'Failed',
    Cancelled: 'Cancelled'
} as const;

export type CollectionState = typeof CollectionState[keyof typeof CollectionState];


/**
 * 
 * @export
 * @interface DataCollectionJobDto
 */
export interface DataCollectionJobDto {
    /**
     * 
     * @type {string}
     * @memberof DataCollectionJobDto
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DataCollectionJobDto
     */
    'symbol'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DataCollectionJobDto
     */
    'fromUtc'?: string;
    /**
     * 
     * @type {string}
     * @memberof DataCollectionJobDto
     */
    'toUtc'?: string;
    /**
     * 
     * @type {string}
     * @memberof DataCollectionJobDto
     */
    'interval'?: string;
    /**
     * 
     * @type {CollectionState}
     * @memberof DataCollectionJobDto
     */
    'state'?: CollectionState;
    /**
     * 
     * @type {number}
     * @memberof DataCollectionJobDto
     */
    'totalChunks'?: number;
    /**
     * 
     * @type {number}
     * @memberof DataCollectionJobDto
     */
    'completedChunks'?: number;
    /**
     * 
     * @type {string}
     * @memberof DataCollectionJobDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DataCollectionJobDto
     */
    'startedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DataCollectionJobDto
     */
    'completedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DataCollectionJobDto
     */
    'errorMessage'?: string | null;
}


/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {UserDto}
     * @memberof LoginResponse
     */
    'user'?: UserDto;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'accessToken'?: string | null;
}
/**
 * 
 * @export
 * @interface LoginResponseApiResponse
 */
export interface LoginResponseApiResponse {
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponseApiResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {LoginResponse}
     * @memberof LoginResponseApiResponse
     */
    'data'?: LoginResponse;
}
/**
 * 
 * @export
 * @interface QueueDataCollectionRequest
 */
export interface QueueDataCollectionRequest {
    /**
     * 
     * @type {string}
     * @memberof QueueDataCollectionRequest
     */
    'symbol'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QueueDataCollectionRequest
     */
    'fromUtc'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QueueDataCollectionRequest
     */
    'toUtc'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof QueueDataCollectionRequest
     */
    'intervalMinutes'?: number;
}
/**
 * 
 * @export
 * @interface QueueJobResponse
 */
export interface QueueJobResponse {
    /**
     * 
     * @type {string}
     * @memberof QueueJobResponse
     */
    'jobId'?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'confirmPassword'?: string | null;
}
/**
 * 
 * @export
 * @interface StringApiResponse
 */
export interface StringApiResponse {
    /**
     * 
     * @type {boolean}
     * @memberof StringApiResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StringApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StringApiResponse
     */
    'data'?: string | null;
}
/**
 * 
 * @export
 * @interface TradeOnHistoryDataRequest
 */
export interface TradeOnHistoryDataRequest {
    /**
     * 
     * @type {number}
     * @memberof TradeOnHistoryDataRequest
     */
    'targetWeight'?: number;
    /**
     * 
     * @type {number}
     * @memberof TradeOnHistoryDataRequest
     */
    'threshold'?: number;
    /**
     * 
     * @type {number}
     * @memberof TradeOnHistoryDataRequest
     */
    'minQty'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TradeOnHistoryDataRequest
     */
    'minNotional'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TradeOnHistoryDataRequest
     */
    'jobId': string | null;
    /**
     * 
     * @type {number}
     * @memberof TradeOnHistoryDataRequest
     */
    'initBaselineQuantity'?: number;
}
/**
 * 
 * @export
 * @interface TradingResultDto
 */
export interface TradingResultDto {
    /**
     * 
     * @type {number}
     * @memberof TradingResultDto
     */
    'startTotalInBaseline'?: number;
    /**
     * 
     * @type {number}
     * @memberof TradingResultDto
     */
    'endTotalInBaseline'?: number;
    /**
     * 
     * @type {number}
     * @memberof TradingResultDto
     */
    'profitInBaseline'?: number;
    /**
     * 
     * @type {number}
     * @memberof TradingResultDto
     */
    'justHoldTotalInBaseline'?: number;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDto
     */
    'roles'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface UserDtoApiResponse
 */
export interface UserDtoApiResponse {
    /**
     * 
     * @type {boolean}
     * @memberof UserDtoApiResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDtoApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {UserDto}
     * @memberof UserDtoApiResponse
     */
    'data'?: UserDto;
}

/**
 * DataCollectionApi - axios parameter creator
 * @export
 */
export const DataCollectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataCollectionDataJobIdGet: async (jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('apiDataCollectionDataJobIdGet', 'jobId', jobId)
            const localVarPath = `/api/DataCollection/data/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataCollectionJobsActiveGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DataCollection/jobs/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataCollectionJobsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DataCollection/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataCollectionJobsJobIdDelete: async (jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('apiDataCollectionJobsJobIdDelete', 'jobId', jobId)
            const localVarPath = `/api/DataCollection/jobs/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataCollectionJobsJobIdGet: async (jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('apiDataCollectionJobsJobIdGet', 'jobId', jobId)
            const localVarPath = `/api/DataCollection/jobs/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QueueDataCollectionRequest} [queueDataCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataCollectionQueuePost: async (queueDataCollectionRequest?: QueueDataCollectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DataCollection/queue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queueDataCollectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataCollectionApi - functional programming interface
 * @export
 */
export const DataCollectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataCollectionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataCollectionDataJobIdGet(jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CandleDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataCollectionDataJobIdGet(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataCollectionApi.apiDataCollectionDataJobIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataCollectionJobsActiveGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataCollectionJobDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataCollectionJobsActiveGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataCollectionApi.apiDataCollectionJobsActiveGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataCollectionJobsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataCollectionJobDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataCollectionJobsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataCollectionApi.apiDataCollectionJobsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataCollectionJobsJobIdDelete(jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataCollectionJobsJobIdDelete(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataCollectionApi.apiDataCollectionJobsJobIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataCollectionJobsJobIdGet(jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataCollectionJobDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataCollectionJobsJobIdGet(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataCollectionApi.apiDataCollectionJobsJobIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QueueDataCollectionRequest} [queueDataCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataCollectionQueuePost(queueDataCollectionRequest?: QueueDataCollectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueueJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataCollectionQueuePost(queueDataCollectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataCollectionApi.apiDataCollectionQueuePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DataCollectionApi - factory interface
 * @export
 */
export const DataCollectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataCollectionApiFp(configuration)
    return {
        /**
         * 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataCollectionDataJobIdGet(jobId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CandleDto>> {
            return localVarFp.apiDataCollectionDataJobIdGet(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataCollectionJobsActiveGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<DataCollectionJobDto>> {
            return localVarFp.apiDataCollectionJobsActiveGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataCollectionJobsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<DataCollectionJobDto>> {
            return localVarFp.apiDataCollectionJobsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataCollectionJobsJobIdDelete(jobId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDataCollectionJobsJobIdDelete(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataCollectionJobsJobIdGet(jobId: string, options?: RawAxiosRequestConfig): AxiosPromise<DataCollectionJobDto> {
            return localVarFp.apiDataCollectionJobsJobIdGet(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QueueDataCollectionRequest} [queueDataCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataCollectionQueuePost(queueDataCollectionRequest?: QueueDataCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<QueueJobResponse> {
            return localVarFp.apiDataCollectionQueuePost(queueDataCollectionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataCollectionApi - object-oriented interface
 * @export
 * @class DataCollectionApi
 * @extends {BaseAPI}
 */
export class DataCollectionApi extends BaseAPI {
    /**
     * 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataCollectionApi
     */
    public apiDataCollectionDataJobIdGet(jobId: string, options?: RawAxiosRequestConfig) {
        return DataCollectionApiFp(this.configuration).apiDataCollectionDataJobIdGet(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataCollectionApi
     */
    public apiDataCollectionJobsActiveGet(options?: RawAxiosRequestConfig) {
        return DataCollectionApiFp(this.configuration).apiDataCollectionJobsActiveGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataCollectionApi
     */
    public apiDataCollectionJobsGet(options?: RawAxiosRequestConfig) {
        return DataCollectionApiFp(this.configuration).apiDataCollectionJobsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataCollectionApi
     */
    public apiDataCollectionJobsJobIdDelete(jobId: string, options?: RawAxiosRequestConfig) {
        return DataCollectionApiFp(this.configuration).apiDataCollectionJobsJobIdDelete(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataCollectionApi
     */
    public apiDataCollectionJobsJobIdGet(jobId: string, options?: RawAxiosRequestConfig) {
        return DataCollectionApiFp(this.configuration).apiDataCollectionJobsJobIdGet(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QueueDataCollectionRequest} [queueDataCollectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataCollectionApi
     */
    public apiDataCollectionQueuePost(queueDataCollectionRequest?: QueueDataCollectionRequest, options?: RawAxiosRequestConfig) {
        return DataCollectionApiFp(this.configuration).apiDataCollectionQueuePost(queueDataCollectionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TradingApi - axios parameter creator
 * @export
 */
export const TradingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TradeOnHistoryDataRequest} [tradeOnHistoryDataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradingStartHistoryCheckPost: async (tradeOnHistoryDataRequest?: TradeOnHistoryDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Trading/startHistoryCheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tradeOnHistoryDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TradingApi - functional programming interface
 * @export
 */
export const TradingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TradingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TradeOnHistoryDataRequest} [tradeOnHistoryDataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTradingStartHistoryCheckPost(tradeOnHistoryDataRequest?: TradeOnHistoryDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradingResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTradingStartHistoryCheckPost(tradeOnHistoryDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradingApi.apiTradingStartHistoryCheckPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TradingApi - factory interface
 * @export
 */
export const TradingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TradingApiFp(configuration)
    return {
        /**
         * 
         * @param {TradeOnHistoryDataRequest} [tradeOnHistoryDataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradingStartHistoryCheckPost(tradeOnHistoryDataRequest?: TradeOnHistoryDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<TradingResultDto> {
            return localVarFp.apiTradingStartHistoryCheckPost(tradeOnHistoryDataRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TradingApi - object-oriented interface
 * @export
 * @class TradingApi
 * @extends {BaseAPI}
 */
export class TradingApi extends BaseAPI {
    /**
     * 
     * @param {TradeOnHistoryDataRequest} [tradeOnHistoryDataRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingApi
     */
    public apiTradingStartHistoryCheckPost(tradeOnHistoryDataRequest?: TradeOnHistoryDataRequest, options?: RawAxiosRequestConfig) {
        return TradingApiFp(this.configuration).apiTradingStartHistoryCheckPost(tradeOnHistoryDataRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserLoginPost: async (loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ChangePasswordRequest} [changePasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPasswordPut: async (changePasswordRequest?: ChangePasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRegisterPost: async (registerRequest?: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ChangePasswordRequest} [changePasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserPasswordPut(changePasswordRequest?: ChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserPasswordPut(changePasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserPasswordPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserRegisterPost(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserRegisterPost(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseApiResponse> {
            return localVarFp.apiUserLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UserDtoApiResponse> {
            return localVarFp.apiUserMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ChangePasswordRequest} [changePasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPasswordPut(changePasswordRequest?: ChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<StringApiResponse> {
            return localVarFp.apiUserPasswordPut(changePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRegisterPost(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDtoApiResponse> {
            return localVarFp.apiUserRegisterPost(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserMeGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ChangePasswordRequest} [changePasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserPasswordPut(changePasswordRequest?: ChangePasswordRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserPasswordPut(changePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRequest} [registerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserRegisterPost(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserRegisterPost(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



